{\rtf1\ansi\ansicpg1252\cocoartf2577
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fswiss\fcharset0 Helvetica-BoldOblique;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab709
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab709\partightenfactor0

\f0\b\fs32 \cf0 \ul \ulc0 What It\'92s Worth Work Notes:
\f1\b0 \ulnone  \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab709\pardirnatural\partightenfactor0
\cf0 \ul Commit:\ulnone   \
Changed the IBAction updateUserIncome to use Editing Did End.  \
Added a suite name for UserDefaults.  Made it the bundle name ("savedUserIncomeSuite").  \
Hooked up the UserDefaultsManager class to the MainViewController.  \
Now using a call to the UserDefaultsManager class in code (UserDefaultsManager.shared.savedUserIncomeSuiteDefault).  \
\'97 \'97 \'97 \'97 \'97 \'97 \'97 \'97 \'97 \'97 \'97 \'97 \'97 \'97 \'97 \'97 \'97 \'97 \'97 \'97 \'97 \'97 \'97 \'97 \'97 \'97 \'97 \'97 \
\ul TODO:\ulnone   \
- Learn how to get a return key or something for the virtual keyboard.  \
- Design the multi-add system.  \
  - The table view is just there to show your previous entries and allow you to edit them easily.  \
- Clean Up: \
  - Truncate the result double so it only has two decimal places.  \
  - Make sure when the user is typing in numbers they cannot have add a second decimal place.  \
    - Check the Stanford Calculator for this.  \
    - Try also reading this Google page -- https://www.google.com/search?sxsrf=ALeKk00PcbOAYW2reIIfSIm_k_6h_NpYBQ%3A1610266108256&source=hp&ei=_LX6X7ewDeKH_QaXs7zIDw&q=prevent+user+from+adding+two+decimal+places+swift&oq=prevent+user+from+adding+two+decimal+places+swift&gs_lcp=CgZwc3ktYWIQAzIHCCEQChCgAToECCMQJzoICC4QyQMQkQI6BQgAEJECOgUILhCxAzoICC4QsQMQgwE6BQgAELEDOggIABDJAxCRAjoCCAA6CAgAELEDEMkDOgoIABCxAxDJAxAKOgcIABCxAxAKOggIABCxAxCDAToFCAAQyQM6BggAEBYQHjoJCAAQyQMQFhAeOggIIRAWEB0QHjoFCCEQqwI6BQghEKABUB5Y-zlg9jpoA3AAeAGAAYUCiAGmJJIBBzIwLjIxLjGYAQCgAQGqAQdnd3Mtd2l6&sclient=psy-ab&ved=0ahUKEwi3nv_a9JDuAhXiQ98KHZcZD_kQ4dUDCAg&uact=5 \
  - Find other places I need to polish.  \
- Research and figure out dictation and seamless searching.  \
  - Research iWatch integration.  \
- Look over all in code TODOs and organize.  \
- Consider reaching a wider audience.  Internationalization, blind, deaf, color blind, stuff.  \
  - https://developer.apple.com/localization/ \
  - https://developer.apple.com/documentation/uikit/accessibility_for_ios_and_tvos/supporting_voiceover_in_your_app \
- Figure out how to make it look nicer.  \
- Read about designing human interfaces and how to get your app accepted onto the app store -- https://developer.apple.com/design/ \
- Design and add the "Figure out your hourly labor value" thing as an update.  \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab709\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab709\partightenfactor0
\cf0 \ul NEXT:\ulnone  \
- SORT: Research proper currency conversion.  \
- SORT: See if I can simplify the process for converting a string to a double and back.  I feel like there's a lot of repeating code.  \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab709\pardirnatural\partightenfactor0
\cf0 - Change the name of the UpdateLatestIncomeInfoViewController to HourlyRateViewController.  \
- Clean up Work Notes (here) again.  \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab709\partightenfactor0
\cf0 - Simplify and improve the HourlyRateViewController and View.  \
  - Remove your current UI.  \
  - Simplify -- We just need to know what the user's \
- Connect that result with the rest of the program (AKA the income textfield in the MainViewController).  \
  - Currently use a segue to store the user's hourly rate entry.  \
- Change all instances of Textfield to TextField (capital F).  \
- Add persistence to save the user's hourly wage.  \
  - Call it without any UI from the persistent container.  \
- Research dictation.  \
- Research Apple Watch connection.  \
- Show and go over with Dad.  \
- Make sure all textfields need to be filled properly before allowing the user to move.  Right now only one textfield needs to be properly checked.  \
  - ALL textfield checks are cut from the same cloth and thus all need to be changed.  Right now they are in the UpdateLatestIncomeInfoViewController and the MainViewController.  \
  - Rework the textfield check through pseudo-code, then rewrite.  \
  - Test and debug so that it works the way you want.  \
- Write an explanation or sales pitch that will go on the set up screen, and another for the app store.  \
  - I need to succinctly explain who the app is for, and how to use the app.  \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab709\pardirnatural\partightenfactor0
\cf0 - Fix DRY 1 -- The initial label text is set and displayed in two different places.  \
  - Write a separate function for displaying the original calculated value.  \
  - Delete and reconnect the Hours button outlet.  \
  - Call that function when the Hours button is pressed.\
  - Call that function when the calculation is complete or something. \
- Fix DRY 2 -- A new convertedResult is used every time the unit of time is changed.   \
  - Probably need one or more "global" variables.  \
- The time conversion IBActions are kind of a mess.  I dunno if it's a big deal but there are probably multiple ways to make it run or read more smoothly.  \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab709\partightenfactor0
\cf0 - Finish any TODOs left in the code.  \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab709\pardirnatural\partightenfactor0
\cf0 \
\ul Fixes:\ulnone  \
- Figure out what this error means: 
\f0\b 2020-12-13 13:36:23.500603-0500 Labor-Value[6050:273322] Can't find keyplane that supports type 8 for keyboard iPhone-PortraitTruffle-DecimalPad; using 25942_PortraitTruffle_iPhone-Simple-Pad_Default
\f1\b0  \
  - Only seems to appear when calling the decimal keypad.  \
- I also want to fix the -NaN error I get when I don't enter anything into the Textfields.  This is more of a pet peeve than a real problem to fix.  \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab709\partightenfactor0
\cf0 - Keypad Work -- Textfields only allow one decimal.  \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab709\pardirnatural\partightenfactor0
\cf0 - On the ResultsView make the program select the smallest unit of time for a given result (for example if something would take 48 hours, display 2 days by default).  \
- On the ResultsView resize the units of time label and the results label if necessary.  \
\
\ul Dev & Work Notes:\ulnone  \
- (10/12/2020) @14:29 -- I get the sneaking suspicion I did not ACTUALLY hook up the accumulator, however I can't see how it's not hooked up if it isn't.  So I'm leaving it until I see a bug.  \
- I can return to this method if I think it's necessary, but for now I've decided on a different approach.  \
  - This is a little complicated and I don't fully understand how I'm supposed to write it.  So for now I'll 
\f0\b plan on the calendar to learn this stuff properly
\f1\b0 , and instead focus on building the app for now.  \
    - The learning segment should be done at night with a completely new project.  \
  - In the MainViewController, check if the itemString or itemPriceString are 0.  If they are do NOT preform a segue.  I may need to learn how to use a shouldPerformSegueWithIdentifier.  \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\ul Final Build & Release:\ulnone  \
- Make an attractive and painfully easy app to use.  I should leverage my focus on design and psychology.  \
- 
\f0\b Primary goal
\f1\b0  is to build up as much of an audience as possible.  Profitability comes second to social impact.  \
  - "How do I make money?" always comes after "How do I get people to stay?"  \
    - What do I do with an audience?  \
- 
\f0\b Revenue:
\f1\b0  \
  - No ads? \
    - Ads aren't call (although neither is finance).  \
    - Also I always like to know how someone is making money.  Being honest is important.  \
  - Sell initially for like a dollar?  \
  - Limited time ads?  \
  - Different more complicated revenue model?  \
    - Honey-like -- See what deals you can get on an item at check out.  \
      - Pre-paid credit or debit card idea?  Different market from Capital One's card.  \
    - Capital One \'97 https://www.capitalone.com/learn-grow/money-management/capital-one-shopping/ \
    - Honey \'97 https://help.joinhoney.com/article/30-how-does-honey-make-money \
- 
\f0\b Is there a way to add user communications
\f1\b0 ?  \
  - Any program with user to user interaction (like Dark Souls) is more likely to bee successful.  Does anything like that fit here?  \
    - Something like Venmo, but I mean there's already competition for that.  \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab709\pardirnatural\partightenfactor0

\f0\b \cf0 \ul Feature Functionality Outlines:
\f1\b0 \ulnone  \
- \ul Decimal checker function:\ulnone  \
  - Can I call the keypad to see if the decimal button is pressed?  If so...\
  - Run a loop through the String to see if there is a decimal place\
  - If there IS then either ignore or allow \'93\'94 (if that\'92s possible) \
    - If there IS NOT then add a decimal.  \
- \ul Disable movement if data is not filled in:\ulnone  \
  - The user needs to enter valid data (not nil or 0) to get a calculation.  In order to see if the data is valid, and force the user to type in proper data (like their income, or an item's price), I want to disable certain buttons (eg. the \
  - Find Out button (and any other button with this feature applied to it) is disabled by default until some valid data is entered.  \
  - When the textfield changes run a function that checks to see if the data is valid.  \
    - 
\f2\i\b How do I check if the textfield changed
\f1\i0\b0 ?  \
      - Check when the keyboard is dismissed.  This assumes I can check when the keyboard is dismissed (which I think I can do).  \
      - OR check when the endEditing is true? \
      - OR when dismissKeyboard is called?   \
  - If the data is valid in all of the necessary textfields (there can be more than one) then the next screen button (eg. Find Out) will be enabled.  \
  - Alternate Solution: \
    - I can separate the dollars and cents portions of the labels if I really want.  No decimals necessary.  \
    - It\'92s more naturally and easier to just type in the one number for users so I\'92d rather do that.  \
    - Also this makes internationalization way more difficult.  \
    - This may be a third way decent prototyping or public alpha idea.  \
\
\
SORT: \
- No paycheck question \
- How much do you make an hour?  \
  - Can make a tool for this.  \
- What are we buying?  Guy says a beer.  \
  - The program should know what a beer costs on average.  \
- Dictation should be added.  \
- Do a calculation immediately after the user starts typing in numbers.  \
  - What if someone doesn\'92t want to hit enter.  This isn\'92t really a concern but maybe I can do this anyway.   }